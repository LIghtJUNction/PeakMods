name: Publish PeakChatOps to Thunderstore
# 触发条件：当 PeakChatOps.csproj 文件被提交时（含分支推送、PR合并）
on: 
  push:
    branches: [ '*' ]  # 监听所有分支的推送（可按需限定为 main/dev 等）
    paths:
      - 'src/PeakChatOps/PeakChatOps.csproj'  # 仅监听该 csproj 文件的变更
  pull_request:  # 可选：PR合并时也触发（如需可保留，不需要可删除）
    branches: [ '*' ]
    paths:
      - 'src/PeakChatOps/PeakChatOps.csproj'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout PeakMods repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 版本处理：从 csproj 读取版本（不再依赖标签，因触发条件已变）
      - name: Get version from .csproj
        working-directory: ./src/PeakChatOps
        id: get_version
        run:
          # 从 csproj 中提取 Version 字段值
          VERSION=$(grep -oP '<Version>\K[^<]+' PeakChatOps.csproj)
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # 存入环境变量

      - name: Build & Package PeakChatOps (PackTS)
        working-directory: ./src/PeakChatOps
        run: dotnet build PeakChatOps.csproj -c Release -target:PackTS -v d

      - name: Install Thunderstore CLI
        run: dotnet tool install --global Thunderstore.CLI

      - name: Publish to Thunderstore
        working-directory: ./src/PeakChatOps
        env:
          THUNDERSTORE_TOKEN: ${{ secrets.THUNDERSTORE_API_TOKEN }}
        # 使用从 csproj 提取的版本号发布
        run:
          echo "查看打包输出目录文件："
          ls ../../artifacts/thunderstore/
          tcli publish --token $THUNDERSTORE_TOKEN --version "v$VERSION"  # 加 v 前缀符合 Thunderstore 习惯
